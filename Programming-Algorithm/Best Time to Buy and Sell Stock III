"""
the first one is an efficient one based on internet comments. the second one is my own by removeing the decreasing subarrays. 
both solutions are intended to find out the greatest gap within each of the two sub-arrays. 

http://www.cnblogs.com/zuoyuan/p/3766168.html
"""
class Solution:
    # @param {integer[]} prices
    # @return {integer}
    def maxProfit(self, prices):
        if len(prices)<=1:
            return 0
            
        length=len(prices)
        left=[0 for i in range(len(prices))]
        right=[0 for i in range(len(prices))]
        
        res, minprice, maxprice=0, prices[0], prices[length-1]
        for i in range(1,length):
            minprice=min(minprice, prices[i])
            left[i]=max(left[i-1],prices[i]-minprice)
            
        for i in range(length-2,-1,-1):  
            maxprice=max(maxprice, prices[i])
            right[i]=max(right[i+1], maxprice-prices[i])
  
        for i in range(length):
            res=max(res, left[i]+right[i])
        return res   

"""
this is my first solution...
"""

    def maxProfit(self, prices):
        def maxprofit(prices):
            if len(prices)<=1: return 0
            low,profit=prices[0],0
            for price in prices:
                if price<low: low=price
                profit=max(profit, price-low)
            return profit 
       
        move,i,profit=0,1,0
        while i<=len(prices)-1:
            if prices[i]>prices[i-1]:
                move=i
                while move<=len(prices)-1 and prices[move]>prices[move-1] :
                    move+=1
                i=move
                temp= maxprofit(prices[:i])+maxprofit(prices[i:])
                if profit<temp: profit=temp
            else:
                while i<=len(prices)-1 and prices[i]<=prices[i-1] :
                    i+=1
                prices=prices[:move]+prices[i-1:]
                i=move+1
        return profit
